swagger: '2.0'
# You should specify common part of your endpoints in the following format:
#   <schemes>://<host><basepath>
schemes:
  - https # Remove if your API donsn't support HTTPS
host: api.thingful.net
basePath: /
info:
  # Describe your API here, you can use GFM (https://guides.github.com/features/mastering-markdown) here
  description: |
    Thingful.net API documentation - design document.

    This text is markdown, and you can add stuff here etc.
  version: '1.0.0'
  title: Thingful
  termsOfService: 'https://thingful.net/site/tos/'
  contact:
    email: 'support@thingful.net'
    url: 'https://thingful.net/site/contact'
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  x-logo:
    url: 'https://apis.guru/openapi-template/logo.png'

produces:
  # List of mime types your API endpoins can return.
  # This is a global default. You can OVERWRITE it in each specific operation.
  # Remove the ones not used in your API
  - application/json
  - text/csv
  # you can add any mime type your API produces to the list
consumes:
  # List of mime types your API endpoins consumes.
  # This is a global default. You can OVERWRITE it in each specific operation.
  # Remove the ones not supported by your API
  - application/json
  - text/csv
  # you can add any mime type your API consumes to the list

# A list of tags used by the specification with additional metadata.
tags:
  - name: things
    description: Operations to do with discovering and accessing IoT resources.
    
# Security scheme definitions that can be used across the specification.
securityDefinitions:
  bearer_auth:
    description: |
      This scheme relies on authenticating users by having them present a standard `Authorization` header containing the value `Bearer` followed by their API key.
    type: apiKey
    name: Authorization
    in: header
  api_key_auth:
    description: |
      For clients unable to send request headers, they may also authenticate themselves by sending their API key via a query parameter.
    type: apiKey
    in: query # Where API key will be passed: header or query
    name: key # API key paramteer name
  basic_auth:
    description: |
      Clients may also send their username and password via HTTP Basic authentication to authenticate themselves.
    type: basic

parameters:
  authorizationHeader:
    name: Authorization
    in: header
    type: string
    description: Standard Authorization header; token must be sent using the `Bearer` format.
  apiKey:
    name: key
    in: query
    type: string
    description: For clients unable to send HTTP headers, they may also send their authorization token via a query parameter.
  refresh:
    name: refresh
    in: query
    type: boolean
    description: |
      Boolean flag indicating whether or not the client desires Thingful to go and try and retrieve the latest value from the upstream data provider, or just to return the last indexed value currently stored in Thingful's database.
    default: false
  at:
    name: at
    in: query
    type: string
    format: date-time
    description: |
      This parameter is used to hold a RFC3339/ISO8601 timestamp which indicates the instance in time at which the client desires to receive data.
    
# Holds the relative paths to the individual endpoints. The path is appended to the
# basePath in order to construct the full URL. 
paths:
  '/things/{id}':
    parameters:
      - name: id
        in: path
        description: The ID of the Thing
        required: true
        type: string
      - $ref: '#/parameters/authorizationHeader'
      - $ref: '#/parameters/apiKey'
    get:
      tags:
        - things
      summary: Get a Thing by its ID
      security:
        - basic_auth: []
        - bearer_auth: []
        - api_key_auth: []
      description: |
        This endpoint returns data for a Thing (an IoT resource) indexed by Thingful. It returns either the latest snapshot of the resource (which may be the latest data available), or a parameter can be specified which asks Thingful to go and fetch the value from the upstream data source "now".
        
        In addition this endpoint also allows data to be retrieved from points in the past for the resource if it is available.
      operationId: GetThingByID
      parameters:
        - $ref: '#/parameters/refresh'
        - $ref: '#/parameters/at'
      responses:
        '200':
          description: Success
          schema:
            type: object
            properties:
              '@context':
                $ref: '#/definitions/Context'
              links:
                $ref: '#/definitions/Links'
              data:
                type: object
                properties:
                  '@context':
                    $ref: '#/definitions/Context'
                  id:
                    $ref: '#/definitions/ThingID'
                  type:
                    type: string
                    enum:
                      - thingType
                  attributes:
                    $ref: '#/definitions/ThingAttributes'
  
  '/echo':
    post:
      tags:
        - Echo
      summary: Echo test
      description: Receive the exact message you've sent
      operationId: echo
      parameters:
        - name: message
          in: body
          description: 'Echo payload'
          required: true
          schema:
            type: string
            example: 'Hello world!'
      security:
        - api_key_auth: []
      responses:
        '200':
          description: 'OK'
          examples:
            'application/json': 'Hello world!'
          schema:
            type: string
          # docuemnt headers for this repsonse
          headers:
            X-Rate-Limit: # Header name
              type: integer # Header value type
              format: int32 # Header value format
              description: calls per hour allowed by the user
            X-Expires-After:
              type: string
              format: date-time
              description: date in UTC when token expires
              
# An object to hold data types that can be consumed and produced by operations.
# These data types can be primitives, arrays or models.
definitions:
  ThingID:
    description: The ID of a Thing
    type: string
    example: https://api.thingful.net/things/bj7ajg91
  
  ThingAttributes:
    description: The core attributes of a Thing resource
    type: object
    properties:
      title:
        type: string
        example: Weather Station 152
      description:
        type: string
        example: Weather station located in Brighton, UK.
      createdAt:
        type: string
        format: dateTime
        example: 2017-05-29T11:16:34Z
      updatedAt:
        type: string
        format: dateTime
        example: 2017-06-05T11:15:50Z
      visibility:
        type: string
        enum:
          - thingful:Open
          - thingful:Shared
          - thingful:Closed
        example: thingful:Shared
      endpoint:
        type: object
        properties:
          url:
            type: string
            format: url
            example: http://api.example-weather.net/devices/152
          contentType:
            type: string
            example: application/json
      provider:
        type: object
        properties:
          id:
            type: string
            format: url
            example: https://api.thingful.net/providers/exampleweather
          type:
            type: string
            enum:
              - providerType
            example: providerType
          name:
            type: string
            example: Example Weather Network
          url:
            type: string
            format: url
            example: https://example-weather.net
        
  Links:
    description: Object that holds links pertaining to the resource or resources currently being requested
    type: object
    properties:
      self:
        type: string
        format: url
        example: https://api.thingful.net/things/bj7ajg91
        
  Context:
    description: Link to a JSON-LD context semantically describing the returned JSON
    type: string
    format: url
    example: https://thingful.github.io/schema/context/page.ld
    
  Email:
    description: User email address
    type: string
    format: email
    example: john.smith@example.com
    
  User:
    type: object
    properties:
      username:
        description: User supplied username
        type: string
        minLength: 4
        example: John78
      firstName:
        description: User first name
        type: string
        minLength: 1
        example: John
      lastName:
        description: User last name
        type: string
        minLength: 1
        example: Smith
      email:
        $ref: '#/definitions/Email'
