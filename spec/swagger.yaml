swagger: '2.0'
# You should specify common part of your endpoints in the following format:
#   <schemes>://<host><basepath>
schemes:
  - https # Remove if your API donsn't support HTTPS
host: api.thingful.net
basePath: /
info:
  # Describe your API here, you can use GFM (https://guides.github.com/features/mastering-markdown) here
  description: |
    Thingful.net API documentation - design document.

    **This draft of the documentation is a design proposal, and is not currently deployed, though it is under development.**
  version: '2017.06.05'
  title: Thingful
  termsOfService: 'https://thingful.net/site/tos/'
  contact:
    email: 'support@thingful.net'
    url: 'https://thingful.net/site/contact'
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  x-logo:
    url: 'logo.png'

produces:
  # List of mime types your API endpoins can return.
  # This is a global default. You can OVERWRITE it in each specific operation.
  # Remove the ones not used in your API
  - application/json
  - text/csv
  # you can add any mime type your API produces to the list
consumes:
  # List of mime types your API endpoins consumes.
  # This is a global default. You can OVERWRITE it in each specific operation.
  # Remove the ones not supported by your API
  - application/json
  - text/csv
  # you can add any mime type your API consumes to the list

# A list of tags used by the specification with additional metadata.
tags:
  - name: things
    description: Operations to do with discovering and accessing IoT resources.
  - name: channels
    description: Operations to do with accessing individual thing channels
    
# Security scheme definitions that can be used across the specification.
securityDefinitions:
  bearer:
    description: |
      This scheme relies on authenticating users by having them present a standard `Authorization` header containing the value `Bearer` followed by their API key.
    type: apiKey
    name: Authorization
    in: header
  api_key:
    description: |
      For clients unable to send request headers, they may also authenticate themselves by sending their API key via a query parameter.
    type: apiKey
    in: query # Where API key will be passed: header or query
    name: key # API key paramteer name
  basic:
    description: |
      Clients may also send their username and password via HTTP Basic authentication to authenticate themselves.
    type: basic

parameters:
  authorizationHeader:
    name: Authorization
    in: header
    type: string
    description: Standard Authorization header; token must be sent using the `Bearer` format.
  apiKey:
    name: key
    in: query
    type: string
    description: For clients unable to send HTTP headers, they may also send their authorization token via a query parameter.
  refresh:
    name: refresh
    in: query
    type: boolean
    description: |
      Boolean flag indicating whether or not the client desires Thingful to go and try and retrieve the latest value from the upstream data provider, or just to return the last indexed value currently stored in Thingful's database.
      
      It is an error to set `refresh` to true if the client has supplied any other of the historical time parameters, i.e. `at`, `from` or `to`.
    default: false
  at:
    name: at
    in: query
    type: string
    format: date-time
    description: |
      This parameter is used to hold a RFC3339 timestamp which indicates the instance in time at which the client desires to receive data.
      
      It is an error to specify an `at` value when you also supply `from` and `to` parameters.
  thingID:
    name: thingID
    in: path
    description: The ID of the Thing
    required: true
    type: string
  perPage:
    name: per_page
    in: query
    type: integer
    description: |
      This parameter is used when paging through result sets to control how many results are returned within a single request.
      
      This parameter can be used both within search results and time series queries expressed at the channel level.
    maximum: 1000
    minimum: 1
    
# Holds the relative paths to the individual endpoints. The path is appended to the
# basePath in order to construct the full URL. 
paths:
  '/things/{thingID}':
    parameters:
      - $ref: '#/parameters/thingID'
      - $ref: '#/parameters/authorizationHeader'
      - $ref: '#/parameters/apiKey'
    get:
      tags:
        - things
      summary: Get a Thing by its ID
      operationId: GetThingByID
      security:
        - basic: []
        - bearer: []
        - api_key: []
      description: |
        This endpoint returns data for a Thing (an IoT resource) indexed by Thingful. It returns either the latest snapshot of the resource (which may be the latest data available), or a parameter can be specified which asks Thingful to go and fetch the value from the upstream data source "now".
        
        In addition this endpoint also allows data to be retrieved from points in the past for the resource if it is available.
      parameters:
        - $ref: '#/parameters/refresh'
        - $ref: '#/parameters/at'
      responses:
        '200':
          description: Success
          schema:
            type: object
            properties:
              '@context':
                $ref: '#/definitions/Context'
              links:
                $ref: '#/definitions/Links'
              data:
                type: object
                properties:
                  '@context':
                    $ref: '#/definitions/Context'
                  id:
                    $ref: '#/definitions/ThingID'
                  type:
                    type: string
                    enum:
                      - thingType
                    description: The type of the resource. For things this will always have the value `thingType`.
                  attributes:
                    allOf:
                      - $ref: '#/definitions/ThingAttributes'
                      - $ref: '#/definitions/ThingReadAttributes'
        '500':
          $ref: '#/responses/500ErrorResponse'
        '404':
          description: Requested Thing not found
          schema:
            $ref: '#/definitions/ErrorResponse'
          examples:
            'application/json':
              errors:
                - status: '404'
                  title: Not Found
                  detail: Unable to locate the Thing at https://api.thingful.net/things/bj7ajg91 
    patch:
      tags:
        - things
      summary: Update Thing
      operationId: UpdateThingByID
      security:
        - basic: []
        - bearer: []
        - api_key: []
      description: |
        This endpoint allows the owner of a Thingful resource to send an update containing new observations and/or location information to Thingful. When sending a PATCH request for a thing a client may *only* send the fields they specifically wish to update, other fields can be omitted. These omitted fields will be left unchanged after the update has completed.
        
        Typically a client might only send over the contained `observations` property for each channel containing new data points to be stored. 
      parameters:
        - name: thing
          in: body
          description: The incoming Thing data to update.
          required: true
          schema:
            type: object
            properties:
              data:
                type: object
                description: The top level container for the updated data for the Thing.
                required:
                  - type
                  - id
                  - attributes
                properties:
                  type:
                    type: string
                    enum:
                      - thingType
                    description: The type of resource we are updating. For things this must be `thingType`.
                  id:
                    $ref: '#/definitions/ThingID'
                  attributes:
                    $ref: '#/definitions/ThingAttributes'
                    
      responses:
        '200':
          description: Success
          schema:
            type: object
            properties:
              '@context':
                $ref: '#/definitions/Context'
              links:
                $ref: '#/definitions/Links'
              data:
                type: object
                properties:
                  '@context':
                    $ref: '#/definitions/Context'
                  id:
                    $ref: '#/definitions/ThingID'
                  type:
                    type: string
                    enum:
                      - thingType
                    description: The type of the resource. For things this will always have the value `thingType`.
                  attributes:
                    allOf:
                      - $ref: '#/definitions/ThingAttributes'
                      - $ref: '#/definitions/ThingReadAttributes'
          
  '/things':
    post:
      tags:
        - things
      summary: Create Thing
      operationId: CreateThing
      description: |
        This endpoint allows a user with sufficient permissions to create a new Thing instance within Thingful's database.
      security:
        - basic: []
        - bearer: []
        - api_key: []
      parameters:
        - name: thing
          in: body
          description: The incoming Thing data to create.
          required: true
          schema:
            type: object
            properties:
              data:
                type: object
                description: The top level container for the updated data for the Thing.
                required:
                  - type
                  - attributes
                properties:
                  type:
                    type: string
                    enum:
                      - thingType
                    description: The type of resource we are updating. For things this must be `thingType`.
                  attributes:
                    allOf:
                      - $ref: '#/definitions/ThingAttributes'
                    required:
                      - title
                      - visibility
                      - endpoint
                      - provider
                      - category
                      - license
                      - location
                      - channels
      responses:
        '201':
          description: Success
          schema:
            type: object
            properties:
              '@context':
                $ref: '#/definitions/Context'
              links:
                $ref: '#/definitions/Links'
              data:
                type: object
                description: Container for the created Thing resource
                properties:
                  '@context':
                    $ref: '#/definitions/Context'
                  id:
                    $ref: '#/definitions/ThingID'
                  type:
                    type: string
                    enum:
                      - thingType
                    description: The type of the resource. For things this will always have the value `thingType`.
                  attributes:
                    allOf:
                      - $ref: '#/definitions/ThingAttributes'
                      - $ref: '#/definitions/ThingReadAttributes'
          headers:
            Location:
              description: The location of the newly created Thing resource
              type: string
              format: url
  
  '/things/{thingID}/channels/{channelID}':
    parameters:
      - $ref: '#/parameters/thingID'
      - name: channelID
        in: path
        description: The ID of the channel
        required: true
        type: string
      - $ref: '#/parameters/authorizationHeader'
      - $ref: '#/parameters/apiKey'
    get:
      tags:
        - channels
      summary: Get a Channel by its ID
      operationId: GetChannelById
      security:
        - basic: []
        - bearer: []
        - api_key: []
      description: |
        This endpoint returns data for an individual Channel belonging to a Thing indexed by Thingful. It allows clients to either request the last indexed snapshot of the channel, or if historical data for the channel is available, either a snapshot at a specific instance in time or a range of historical data.
        
        Clients are also able to request that Thingful attempt to go and fetch the latest data for a channel by setting the `refresh` parameter to true.
      parameters:
        - $ref: '#/parameters/refresh'
        - $ref: '#/parameters/at'
        - name: from
          in: query
          description: |
            This parameter is used to specify the start point of a time interval for which the client wishes to obtain data. It is expressed as an RFC3339 timestamp.
            
            It is an error to request both a range (using `from` and `to`) and a specific instance (using `at`).
          type: string
          format: date-time
        - name: to
          in: query
          description: |
            This parameter is used to specify the end point of a time interval for which the client wishes to obtain data. It is expressed as an RFC3339 timestamp.
            
            It is an error to request both a range (using `from` and `to`) and a specific instance (using `at`).
            
            It is also an error to specify a `to` value without a corresponding `from` timestamp, however you **may** request a `from` timestamp without a corresponding `to`, as in this case `to` defaults to the current time.
          type: string
          format: date-time
        - name: after
          in: query
          description: |
            This parameter is used to paginate through large sets of observations for a channel. If present its value must be an RFC3339 timestamp indicating within a range denoted by `from` and `to` parameters that we only want to obtain observations after this instant.
            
            This can be used by clients to page through all available observations for the channel.
            
            It is an error for this parameter to be present unless the client has also specified `from` and `to` values.
            
            It is an error for this parameter to be present if the `at` parameter is also specified.
          type: string
          format: date-time
        - $ref: '#/parameters/perPage'
      produces:
        - application/json
        - text/csv
      responses:
        '200':
          description: Success
          schema:
            type: object
            properties:
              '@context':
                $ref: '#/definitions/Context'
              links:
                type: object
                properties:
                  self:
                    type: string
                    format: url
                    description: Link referencing the current document being viewed by the client.
                    example: https://api.thingful.net/things/bj7ajg91/channels/temperature?from=2017-01-01T00:00:00Z&to=2017-01-07T00:00:00Z
                  next:
                    type: string
                    format: url
                    description: Link pointing to the next page of observations available for the channel if any.
                    example: https://api.thingful.net/things/bj7ajg91/channels/temperature?from=2017-01-01T00:00:00Z&to=2017-01-07T00:00:00Z&after=2017-01-02T00:00:00Z
              data:
                type: object
                properties:
                  id:
                    $ref: '#/definitions/ChannelID'
                  type:
                    type: string
                    enum:
                      - channelType
                    description: The type of the resource. For things this will always have the value `thingType`.
                  attributes:
                    allOf:
                      - $ref: '#/definitions/ChannelAttributes'
                      - $ref: '#/definitions/ChannelReadAttributes'
          examples:
            'text/csv': >
              id,title
              38,t-shirt
              
      
  '/echo':
    post:
      tags:
        - Echo
      summary: Echo test
      description: Receive the exact message you've sent
      operationId: echo
      parameters:
        - name: message
          in: body
          description: 'Echo payload'
          required: true
          schema:
            type: string
            example: 'Hello world!'
      security:
        - api_key: []
      responses:
        '200':
          description: 'OK'
          examples:
            'application/json': 'Hello world!'
          schema:
            type: string
          # docuemnt headers for this repsonse
          headers:
            X-Rate-Limit: # Header name
              type: integer # Header value type
              format: int32 # Header value format
              description: calls per hour allowed by the user
            X-Expires-After:
              type: string
              format: date-time
              description: date in UTC when token expires
              
# An object to hold data types that can be consumed and produced by operations.
# These data types can be primitives, arrays or models.
definitions:
  ThingID:
    description: The ID of the Thing
    type: string
    example: https://api.thingful.net/things/bj7ajg91
  
  ThingAttributes:
    description: The core attributes of a Thing resource
    type: object
    properties:
      title:
        type: string
        example: Weather Station 152
        description: The title of the Thing
      description:
        type: string
        example: Weather station located in Brighton, UK.
        description: Human friendly description of the resource.
      visibility:
        type: string
        enum:
          - thingful:Open
          - thingful:Shared
          - thingful:Closed
        example: thingful:Shared
        description: An expandable JSON-LD property representing how Thingful classifies the resource in terms of the ODI's data classification hierarchy.
      endpoint:
        type: object
        description: An object containing a reference to the remote endpoint at which this data is originally published.
        required:
          - uri
        properties:
          uri:
            type: string
            format: url
            example: http://api.example-weather.net/devices/152
            description: |
              A unique URI for the resource which must be either the remote URL at which data can be retrieved for this Thing, or a non-resolvable URI representing the Thing.
          contentType:
            type: string
            example: application/json
            description: The content type of the remote data resource.
      provider:
        type: object
        description: An object containing information about the remote data provider.
        required:
          - name
          - url
        properties:
          name:
            type: string
            example: Example Weather Network
            description: The name of the remote data provider
          url:
            type: string
            format: url
            example: https://example-weather.net
            description: The website of the remote data provider
      category:
        type: string
        description: The general category of the Thing resource
        example: thingful:Transport
      license:
        type: string
        format: url
        description: A field containing a link to the license under which the original data has been published.
        example: https://creativecommons.org/licenses/by/3.0/
      location:
        $ref: '#/definitions/Location'
      metadata:
        type: array
        description: Optional array of additional metadata properties for the thing
        items:
          $ref: '#/definitions/Property'
      channels:
        type: array
        description: An array of channel objects representing the individual data channels published for the parent Thing
        items:
          allOf:
            - $ref: '#/definitions/ChannelIDAttributes'
            - $ref: '#/definitions/ChannelAttributes'
            
  # Attributes for a Thing that a client cannot send when creating or updating the resource
  ThingReadAttributes:
    type: object
    properties:
      createdAt:
        type: string
        format: date-time
        example: 2017-05-29T11:16:34Z
        description: RFC3339 timestamp representing the time at which the resource has been created.
      updatedAt:
        type: string
        format: date-time
        example: 2017-06-05T11:15:50Z
        description: RFC3339 timestamp representing the time at which the resource was last updated.
      channels:
        type: array
        description: An array of channel objects representing the individual data channels published for the parent Thing
        items:
          allOf:
            - $ref: '#/definitions/ChannelIDAttributes'
            - $ref: '#/definitions/ChannelReadAttributes'
            - $ref: '#/definitions/ChannelAttributes'

  Location:
    type: object
    description: Object used to hold location information for a Thing, Channel or Observation.
    required:
      - lng
      - lat
    properties:
      lng:
        type: number
        format: float
        description: The longitude of the resource expressed in decimal notation.
        example: -0.084101
        maximum: 180
        minimum: -180
      lat:
        type: number
        format: float
        description: The latitude of the resource expressed in decimal notation.
        example: 51.552338
        maximum: 90
        minimum: -90
      elevation:
        type: number
        format: float
        description: The elevation above sea level, expressed in metres.
        example: 23.9
        
  ChannelID:
    description: The ID of the individual channel
    type: string
    example: https://api.thingful.net/things/bj7ajg91/channels/temperature
  
  ChannelIDAttributes:
    type: object
    properties:
      id:
        $ref: '#/definitions/ChannelID'
        
  ChannelAttributes:
    type: object
    description: The attributes describing an individual channel within a Thing
    properties:
      domain:
        type: string
        description: The domain of this channel expressed as a JSON-LD expandable property.
        example: m3-lite:Weather
      quantityKind:
        type: string
        description: The "quantity" this channel is measuring expressed as a JSON-LD expandable property describing what type of quantity in the world is this channel measuring.
        example: m3-lite:AirTemperature
      measuredBy:
        type: string
        description: A JSON-LD property expressing what type of sensor was used to measure this channel's data value.
        example: m3-lite:AirThermometer
      unit:
        type: string
        description: The unit of measure for this data channel expressed as an expandable JSON-LD property containing a pointer to a unit defined in an external ontology.
        example: m3-lite:DegreeCelsius
      metadata:
        type: array
        description: Optional array of additional metadata properties for the channel
        items:
          $ref: '#/definitions/Property'
      observations:
        type: array
        description: An array containing individual observations for the channel.
        items:
          $ref: '#/definitions/Observation'
          
  ChannelReadAttributes:
    type: object
    properties:
      type:
        type: string
        description: The type of the resource. For channels this will always have the value `channelType`.
        enum:
          - channelType
      dataType:
        type: string
        description: The data type of of all values recorded within the observations data structure for this channel. These properties are expandable JSON-LD properties which can be resolved to specific classes within an external ontology.
        enum:
          - thingful:Float
          - thingful:Integer
          - thingful:String
          - thingful:DateTime
      historicalData:
        type: boolean
        description: Boolean flag indicating whether or not historical data is available for this individual channel
        example: false
          
  Observation:
    type: object
    description: An individual observation for a channel is a single data value recorded at some specific location at some specific time instant.
    required:
      - recordedAt
      - value
    properties:
      recordedAt:
        type: string
        format: date-time
        description: The instant at which the observation was recorded expressed as an RFC3339 timestamp.
        example: 2017-05-29T11:16:34Z
      location:
        $ref: '#/definitions/Location'
      value:
        type: string
        description: The actual recorded value serialised as a string. The `dataType` property on the parent channel can be used to control the deserialisation of this property should it be required.
        example: '12.9'
  
  Property:
    type: object
    description: A single piece of generic metadata that should be attached to a Thing or Channel. This is used to capture extra metadata that is not already described by explicit properties of the object.
    properties:
      prop:
        type: string
        description: The name of this property, it can either be a URL literal, or a JSON-LD expandable property which resolves to a complete URL.
        example: thingful:hasBusRoute
      val:
        type: string
        description: The value of the property. This can either be an expandable JSON-LD property, a complete URL describing some specific property, or a string literal.
        example: '42'
        
  Links:
    description: Object that holds links pertaining to the resource or resources currently being requested
    type: object
    properties:
      self:
        type: string
        format: url
        description: Link containing the URL used to reference the current document
        example: https://api.thingful.net/things/bj7ajg91
        
  Context:
    description: Link to a JSON-LD context semantically describing the returned JSON
    type: string
    format: url
    example: https://thingful.github.io/schema/context/page.ld
    
  Email:
    description: User email address
    type: string
    format: email
    example: john.smith@example.com
  
  ErrorResponse:
    description: Container object for one or more errors returned by the API.
    type: object
    required:
      - errors
    properties:
      errors:
        type: array
        items:
          $ref: '#/definitions/Error'
          
  Error:
    description: An error object returned by the API.
    type: object
    required:
      - status
      - title
    properties:
      status:
        type: string
        description: The HTTP status code applicable to this problem expressed as a string
        example: 400
      title:
        type: string
        description: Short human-readable summary of the problem
        example: Bad Request
      detail:
        type: string
        description: Optional longer form human-readable explanation tailored to be specific to this specific occurence of the problem.
      source:
        type: object
        properties:
          pointer:
            type: string
            description: A string containing a JSON pointer to the specific field within a received JSON body that caused the problem, e.g. '/data/attributes/title' to refer to the `title` property within the `attributes` object that is a child of the top level `data` object.
            example: /data/attributes/title
          parameter:
            type: string
            description: A string containing a reference to a specific query parameter that has caused the problem.
            example: lng
            
  User:
    type: object
    properties:
      username:
        description: User supplied username
        type: string
        minLength: 4
        example: John78
      firstName:
        description: User first name
        type: string
        minLength: 1
        example: John
      lastName:
        description: User last name
        type: string
        minLength: 1
        example: Smith
      email:
        $ref: '#/definitions/Email'
        
responses:
  '500ErrorResponse':
    description: An unexpected error occurred.
    schema:
      $ref: '#/definitions/ErrorResponse'
    examples:
      'application/json':
        errors:
          - status: '500'
            title: Unexpected Error
            detail: An error occurred while saving record to the database
  '404ErrorResponse':
    description: The requested resource was not found
    schema:
      $ref: '#/definitions/ErrorResponse'
    examples:
      'application/json':
        errors:
          - status: '404'
            title: Resource Not Found
            detail: Unable to locate the requested resource
  '400ErrorResponse':
    description: The client submitted an incorrect or malformed request.
    schema:
      $ref: '#/definitions/ErrorResponse'
    examples:
      'application/json':
        errors:
          - status: '400'
            title: Bad Request
            detail: Missing required parameter
            source:
              parameter: lng
  '403ErrorResponse':
    description: The client has requested a forbidden resource.
    schema:
      $ref: '#/definitions/ErrorResponse'
    examples:
      'application/json':
        errors:
          - status: '403'
            title: Forbidden
            detail: You are forbidden from accessing this resource
  '422ErrorResponse':
    description: The request cannot be fulfilled due to invalid content
    schema:
      $ref: '#/definitions/ErrorResponse'
    examples:
      'application/json':
        errors:
          - status: '422'
            title: Invalid Request
            detail: Missing required field
            source:
              pointer: /data/attributes/title
    
