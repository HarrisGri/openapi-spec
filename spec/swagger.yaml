swagger: '2.0'
schemes:
  - http
  - https
host: api.thingful.net
basePath: /
info:
  description: |
    This is the documentation for Thingful's search and access API for Internet of Things devices.
    
    # Introduction
    This API is documented in **OpenAPI format** and is based on
    [Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.
    
    # Cross-Origin Resource Sharing
    This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).
    And that allows cross-domain communication from the browser.
    All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.
    
    # Authentication
    The Thingful API offers three forms of authentication:
      - Bearer authentication
      - Basic authentication
      - API Key authentication

    ## Bearer
    This form of authentication requires sending an `Authorization` header containing the type value `Bearer` followed by your authentication token.
    
    ## Basic
    Basic authentication allows users to authenticate by sending their username and password.
    
    ## API Key
    API Key authentication also allows clients to authenticate by sending their authentication token via a url query parameter.
    
    This is less secure than sending it via a header, as the token value will be included in server logs, so is only included to support clients unable to send HTTP headers.
    
    <!-- ReDoc-Inject: <security-definitions> -->
    
  version: 2016.12.01
  title: Thingful
  termsOfService: 'https://thingful.net/site/tos/'
  contact:
    email: support@thingful.net
  x-logo:
    url: 'logo.png'
  
externalDocs:
  description: The published API specification is available here.
  url: 'https://thingful.github.io/openapi-spec'
  
tags:
  - name: things
    description: Operations to do with discovering and accessing IoT resources.
  - name: entitlements
    description: Operations to do with entitling third parties to access your data.
  - name: users
    description: Operations to do with user accounts.
    
consumes:
  - 'application/vnd.api+json'
  
produces:
  - 'application/vnd.api+json'
    
securityDefinitions:
  petstore_auth:
    description: |
      Get access to data while protecting your account credentials.
      OAuth2 is also a safer and more secure way to give you access.
    type: oauth2
    authorizationUrl: 'http://petstore.swagger.io/api/oauth/dialog'
    flow: implicit
    scopes:
      'write:pets': modify pets in your account
      'read:pets': read your pets
  api_key:
    description: |
      For this sample, you can use the api key `special-key` to test the authorization filters.
    type: apiKey
    name: api_key
    in: header
    
paths:
  '/things/{id}':
    get:
      tags:
        - things
      summary: Get a Thing by it's ID
      description: |
        This endpoint returns a snapshot of a Thing identified by it's ID.
      parameters:
        - name: id
          in: path
          description: The ID of the Thing
          required: true
          type: string
          
      responses:
        '200':
          description: Success
          schema:
            type: object
            properties:
              id:
                type: string
                example: bj7ajg91
              type:
                type: string
                enum:
                  - thing
              attributes:
                $ref: '#/definitions/ThingAttributes'
        '404':
          description: Not Found
                
  '/users':
    post:
      tags:
        - users
      summary: Create a new User
      description: |
        This endpoint allows for new Users to be created. Only authenticated users with the `CreateUser` role will be able to call this endpoint.
      parameters:
        - name: user
          in: body
          required: true
          description: The new User record to create.
          schema:
            type: object
            properties:
              data:
                type: object
                properties:
                  type:
                    type: string
                    enum:
                      - user
                  attributes:
                    allOf:
                      - $ref: '#/definitions/UserAttributes'
                      - $ref: '#/definitions/UserCreateAttributes'
                    required:
                      - username
                      - email
                      - password
                required:
                  - type
                  - attributes
            required:
              - data
        
      responses:
        '201':
          description: Created User successfully 
          schema:
            $ref: '#/definitions/UserResponse'
          headers:
            Location:
              description: This header contains the location of the newly created User resource
              type: string
              
        '403':
          description: Forbidden
          
  '/users/{id}':
    get:
      tags:
        - users
      summary: Get a User
      operationId: getUser
      description: |
        This endpoint returns information about a user.
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the User
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UserResponse'
    patch:
      tags:
        - users
      summary: Update a User
      operationId: updateUser
      description: |
        This endpoint allows for updating a User record with new values.
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the User
          type: string
        - name: user
          in: body
          required: true
          description: The new User record to create.
          schema:
            type: object
            properties:
              data:
                type: object
                properties:
                  id:
                    $ref: '#/definitions/UserID'
                  type:
                    type: string
                    enum:
                      - user
                  attributes:
                    $ref: '#/definitions/UserAttributes'
                required:
                  - id
                  - type
                  - attributes
            required:
              - data
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UserResponse'
    delete:
      tags:
        - users
      summary: Delete a User
      operationId: deleteUser
      description: |
        This endpoint allows deleting a user
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the User
          type: string
      responses:
        '204':
          description: Successful deletion
          
  '/verify':
    get:
      tags:
        - users
      summary: Verify a User
      operationId: verifyUser
      description: |
        This endpoint allows a client to verify a user account.
      parameters:
        - name: verification_code
          in: query
          required: true
          description: A verification code that has been emailed to a user to confirm their email address
          type: string
      responses:
        '204':
          description: Verification successful
      
      
definitions:
  Tag:
    description: A single metadata fact about a resource
    type: string
    example: thingful:unit=celsius
    
  Metadata:
    description: A collection of facts about a resource
    type: array
    items:
      $ref: '#/definitions/Tag'
    example:
      - thingful:unit=celsius
      - temperature
      - thingful:parameter=temperature
      
  Location:
    description: A location for a resource
    type: object
    properties:
      longitude:
        type: number
        format: float
        maximum: 180
        minimum: -180
        example: -0.084101
      latitude:
        type: number
        format: float
        maximum: 90
        minimum: -90
        example: 51.523379
    required:
      - longitude
      - latitude
      
  Channel:
    description: A single data channel on a Thing
    type: object
    properties:
      label:
        type: string
        example: tempsensor1
      value:
        type: string
        example: '17.2'
      metadata:
        $ref: '#/definitions/Metadata'
    required:
      - label
      - value
      - metadata
      
  ThingAttributes:
    description: The core attributes of a Thing resource
    type: object
    properties:
      title:
        type: string
        example: My Thermometer
      description:
        type: string
        example: An outdoor temperature sensor
      metadata:
        $ref: '#/definitions/Metadata'
      location:
        $ref: '#/definitions/Location'
      channels:
        type: array
        items:
          $ref: '#/definitions/Channel'
    required:
      - title
      - metadata
      
  UserResponse:
    description: Response sent back when getting, creating or updating a User
    type: object
    properties:
      data:
        type: object
        properties:
          id:
            $ref: '#/definitions/UserID'
          type:
            $ref: '#/definitions/UserType'
          attributes:
            $ref: '#/definitions/UserAttributes'
        required:
          - id
          - type
          - attributes
      links:
        type: object
        properties:
          self:
            $ref: '#/definitions/UserSelfLink'
        required:
          - self
    required:
      - data
      - links
      
  UserID:
    description: The id of a User
    type: string
    example: "172833"
    
  UserType:
    description: The type of a User
    type: string
    enum:
      - user
  
  UserSelfLink:
    description: Link to the User
    type: string
    format: url
    example: 'https://api.thingful.net/users/172833'
  
  UserAttributes:
    description: The shared attributes of a User resource
    type: object
    properties:
      username:
        type: string
        minLength: 3
        description: The unique username of the user. User's can attempt to change this, but this operation will fail if another user has already claimed that username.
        example: ellie123
      name:
        type: string
        description: The user's full name.
        example: Ellie Smith
      email:
        type: string
        format: email
        description: The email address of the user.
        example: elliesmith@example.com
        
  UserCombine:
    description: experiment with combinations
    allOf:
      - $ref: '#/definitions/UserAttributes'
      - $ref: '#/definitions/UserCreateAttributes'
    required:
      - username
      - email
      - password
      
  UserCreateAttributes:
    description: User attributes that only make sense when creating or updating a user. These will never be returned via the API.
    type: object
    properties:
      password:
        type: string
        format: password
        description: A new or updated password for the user.
        
  UserVerifyAttributes:
    description: User attributes for verifying a user. These will never be returned via the API.
    type: object
    properties:
      verification_code:
        type: string
        description: When a new user record is created, a verification code will be emailed to the supplied email address. This code will presented back to the API to confirm that we have a real email address for the user. This value will never be sent back to the user via the API.
    required:
      - verification_code
      
  UserRequest:
    description: Object sent when creating or updating a user
    type: object
    properties:
      data:
        type: object
        properties:
          type:
            type: string
            enum:
              - user
          attributes:
            allOf:
              - $ref: '#/definitions/UserAttributes'
              - $ref: '#/definitions/UserCreateAttributes'
        required:
          - type
          - attributes
    required:
      - data
      